{"ast":null,"code":"var _jsxFileName = \"/home/nikki/Desktop/React-Assignment/blog-assignment/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport classes from './Auth.css';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport { Button, Input, Segment, Container } from 'semantic-ui-react';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    this.inputChangedHandler = event => {\n      const updatedControls = { ...this.state.controls,\n        [event.target.name]: { ...this.state.controls[event.target.name],\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[event.target.name].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    console.log(isValid);\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    })); // if (this.props.loading) {\n    //     form = <Spinner />\n    // }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }\n      }, this.props.error.message);\n    }\n\n    let authredirect = null;\n\n    if (this.props.isAuthenticated) {\n      authredirect = this.props.history.push('/');\n    }\n\n    let validationmsg = null;\n\n    if (this.state.valid == \"false\") {\n      console.log('hii');\n      validationmsg = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 27\n        }\n      }, \"Email must be in a@gmail.com format and password length must be 6 characters\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Auth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }, authredirect, /*#__PURE__*/React.createElement(Segment, {\n      textAlign: \"center\",\n      size: \"big\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }\n    }, errorMessage, validationmsg, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }\n    }, \"Email:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 38\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      name: \"email\",\n      onChange: this.inputChangedHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 75\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 84\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }\n    }, \"Password:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      name: \"password\",\n      onChange: this.inputChangedHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 78\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 87\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"grey\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }, \"LOGIN\"))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.loading,\n    error: state.error,\n    isAuthenticated: state.token !== null\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/nikki/Desktop/React-Assignment/blog-assignment/src/containers/Auth/Auth.js"],"names":["React","Component","classes","actions","connect","Button","Input","Segment","Container","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","updatedControls","target","name","checkValidity","setState","submitHandler","preventDefault","props","onAuth","rules","isValid","trim","length","maxLength","pattern","test","console","log","render","formElementsArray","key","push","id","config","form","map","formElement","errorMessage","error","message","authredirect","isAuthenticated","history","validationmsg","mapStateToProps","loading","token","mapDispatchToProps","dispatch","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classes from './Auth.css';\nimport * as actions from '../../store/actions/index'\nimport {connect} from 'react-redux';\nimport {Button,Input, Segment, Container} from 'semantic-ui-react';\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: true\n    }\n\n   \n\n    checkValidity ( value, rules ) {\n        let isValid = true;\n        if ( !rules ) {\n            return true;\n        }\n\n        if ( rules.required ) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if ( rules.minLength ) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if ( rules.maxLength ) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n        if ( rules.isEmail ) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test( value ) && isValid\n        }\n\n        console.log(isValid);\n\n        return isValid;\n    }\n\n    inputChangedHandler = ( event) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [event.target.name]: {\n                ...this.state.controls[event.target.name],\n                value: event.target.value,\n                valid: this.checkValidity( event.target.value, this.state.controls[event.target.name].validation ),\n                touched: true\n            }\n        };\n        this.setState( { controls: updatedControls } );\n    }\n\n    submitHandler = ( event ) => {\n        event.preventDefault();\n        this.props.onAuth( this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup );\n    }\n\n    \n\n    render () {\n        const formElementsArray = [];\n        for ( let key in this.state.controls ) {\n            formElementsArray.push( {\n                id: key,\n                config: this.state.controls[key]\n            } );\n        }\n\n        let form = formElementsArray.map( formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={( event ) => this.inputChangedHandler( event, formElement.id )} />\n        ) );\n\n        // if (this.props.loading) {\n        //     form = <Spinner />\n        // }\n\n        let errorMessage = null;\n\n        if (this.props.error) {\n            errorMessage = (\n                <p>{this.props.error.message}</p>\n            );\n        }\n        let authredirect=null;\n        if(this.props.isAuthenticated){\n            authredirect=this.props.history.push('/');\n        }\n        let validationmsg=null;\n        if(this.state.valid==\"false\"){\n            console.log('hii');\n            validationmsg=<p>Email must be in a@gmail.com format and password length must be 6 characters</p>\n        }\n\n        return (\n            <div className={classes.Auth}>\n                \n                {authredirect}\n                <Segment textAlign=\"center\" size=\"big\">\n                {errorMessage}\n                {validationmsg}\n                <form onSubmit={this.submitHandler}>\n             \n                <label>Email:</label><br></br>\n                <Input name=\"email\" onChange={this.inputChangedHandler} /><br></br><br></br>\n                <label>Password:</label><br></br>\n                <Input name=\"password\" onChange={this.inputChangedHandler} /><br></br><br></br>\n                <Button color=\"grey\">LOGIN</Button>\n                \n                </form>\n                \n                </Segment>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.loading,\n        error: state.error,\n        isAuthenticated: state.token !== null\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: ( email, password, isSignup ) => dispatch( actions.auth( email, password, isSignup ) ),\n    };\n};\n\nexport default connect( mapStateToProps, mapDispatchToProps )( Auth );\n"]},"metadata":{},"sourceType":"module"}