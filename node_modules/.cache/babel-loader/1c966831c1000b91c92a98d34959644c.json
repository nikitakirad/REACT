{"ast":null,"code":"var _jsxFileName = \"/home/nikki/Desktop/React-Assignment/blog-assignment/src/container/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport classes from './Auth.css';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault(); //this.props.onAuth( this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup );\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    })); // if (this.props.loading) {\n    //     form = <Spinner />\n    // }\n    // let errorMessage = null;\n    // if (this.props.error) {\n    //     errorMessage = (\n    //         <p>{this.props.error.message}</p>\n    //     );\n    // }\n    // let authRedirect = null;\n\n    console.log(this.props.isAuthenticated);\n    console.log(this.props.buildingBurger); // if (this.props.isAuthenticated) {\n    //     authRedirect = <Redirect to={this.props.authRedirectPath}/>\n    // }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Auth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }\n    }, form, /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }\n    }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Button, {\n      clicked: this.switchAuthModeHandler,\n      btnType: \"Danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }\n    }, \"SWITCH TO \", this.state.isSignup ? 'SIGNIN' : 'SIGNUP'));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  console.log(state.auth.authRedirectPath);\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/nikki/Desktop/React-Assignment/blog-assignment/src/container/Auth/Auth.js"],"names":["React","Component","Input","classes","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","switchAuthModeHandler","prevState","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement","console","log","props","isAuthenticated","buildingBurger","mapStateToProps","auth","authRedirectPath","loading","error","token","burgerBuilder","building","mapDispatchToProps","dispatch","onAuth","actions","onSetAuthRedirectPath","setAuthRedirectPath","connect"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Input from '../../components/UI/Input/Input';\nimport classes from './Auth.css';\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: true\n    }\n\n    \n\n    checkValidity ( value, rules ) {\n        let isValid = true;\n        if ( !rules ) {\n            return true;\n        }\n\n        if ( rules.required ) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if ( rules.minLength ) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if ( rules.maxLength ) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n        if ( rules.isEmail ) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test( value ) && isValid\n        }\n\n        if ( rules.isNumeric ) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test( value ) && isValid\n        }\n        \n\n        return isValid;\n    }\n\n    inputChangedHandler = ( event, controlName ) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity( event.target.value, this.state.controls[controlName].validation ),\n                touched: true\n            }\n        };\n        this.setState( { controls: updatedControls } );\n    }\n\n    submitHandler = ( event ) => {\n        event.preventDefault();\n        //this.props.onAuth( this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup );\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignup: !prevState.isSignup};\n        });\n    }\n\n    render () {\n        const formElementsArray = [];\n        for ( let key in this.state.controls ) {\n            formElementsArray.push( {\n                id: key,\n                config: this.state.controls[key]\n            } );\n        }\n\n        let form = formElementsArray.map( formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={( event ) => this.inputChangedHandler( event, formElement.id )} />\n        ) );\n\n        // if (this.props.loading) {\n        //     form = <Spinner />\n        // }\n\n        // let errorMessage = null;\n\n        // if (this.props.error) {\n        //     errorMessage = (\n        //         <p>{this.props.error.message}</p>\n        //     );\n        // }\n\n        // let authRedirect = null;\n\n        console.log(this.props.isAuthenticated);\n        console.log(this.props.buildingBurger);\n        // if (this.props.isAuthenticated) {\n\n        //     authRedirect = <Redirect to={this.props.authRedirectPath}/>\n        // }\n\n        return (\n            <div className={classes.Auth}>\n                \n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <button>SUBMIT</button>\n                </form>\n                <Button \n                    clicked={this.switchAuthModeHandler}\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    console.log(state.auth.authRedirectPath);\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: ( email, password, isSignup ) => dispatch( actions.auth( email, password, isSignup ) ),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    };\n};\n\nexport default connect( mapStateToProps, mapDispatchToProps )( Auth );"]},"metadata":{},"sourceType":"module"}