{"ast":null,"code":"var _jsxFileName = \"/home/nikki/Desktop/React-Assignment/blog-assignment/src/Container/Auth.js\";\nimport React, { Component } from 'react';\nimport Input from '../../UI/Input/Input';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/auth/auth';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Message, Segment } from 'semantic-ui-react';\nimport Validator from \"validatorjs\";\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      form: {\n        email: '',\n        password: '',\n        name: ''\n      },\n      errorMessage: {\n        email: '',\n        password: ''\n      },\n      isSignUp: true\n    };\n\n    this.validate = () => {\n      const rules = {\n        email: 'required|email',\n        password: 'required|min:6|max:15',\n        name: 'required'\n      };\n      let validation = new Validator(this.state.form, rules);\n      let isError = validation.fails();\n      this.setState({\n        errorMessage: validation.errors.errors\n      });\n      return isError;\n    };\n\n    this.changeHandler = e => {\n      let form = { ...this.state.form\n      }; //console.log(e.target.name);\n\n      form[e.target.name] = e.target.value; //console.log(e.target.value);\n\n      this.setState({\n        form\n      });\n      const rules = {\n        email: 'required|email',\n        password: 'required|min:6|max:15',\n        name: 'required'\n      };\n      let validation = new Validator(this.state.form, rules);\n      let isError = validation.fails();\n      this.setState({\n        errorMessage: validation.errors.errors\n      });\n      return isError;\n    };\n\n    this.getValidationMessages = () => {\n      let validationMessages = [];\n\n      if (this.state.errorMessage.email) {\n        validationMessages.push( /*#__PURE__*/React.createElement(Message, {\n          key: \"2\",\n          size: \"mini\",\n          error: true,\n          content: this.state.errorMessage.email,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 35\n          }\n        }));\n      }\n\n      if (this.state.errorMessage.password) {\n        validationMessages.push( /*#__PURE__*/React.createElement(Message, {\n          key: \"3\",\n          size: \"mini\",\n          error: true,\n          content: this.state.errorMessage.password,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 35\n          }\n        }));\n      }\n\n      return validationMessages;\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      console.log(\"email: \" + this.state.form.email);\n      console.log(\"signup: \" + this.state.isSignUp);\n      console.log(\"password: \" + this.state.form.password);\n      this.props.onAuth(this.state.form.email, this.state.form.password, this.state.isSignUp).then(() => {\n        this.props.history.push('/dashboard/posts');\n      });\n    };\n  }\n\n  render() {\n    let validationMessages = this.getValidationMessages();\n    let formData = /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }\n    }, validationMessages.length ? /*#__PURE__*/React.createElement(Segment, {\n      style: {\n        display: \"block\"\n      },\n      stacked: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 40\n      }\n    }, [...validationMessages]) : null, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Email\",\n      name: \"email\",\n      onChange: this.changeHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 107\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"password\",\n      placeholder: \"Password \",\n      name: \"password\",\n      onChange: this.changeHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 118\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 123\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, \"Submit\"));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signup\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, \" Enter Details...\"), formData);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isSignup: state.isSignup\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.authLogin(email, password, isSignUp))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Auth));","map":{"version":3,"sources":["/home/nikki/Desktop/React-Assignment/blog-assignment/src/Container/Auth.js"],"names":["React","Component","Input","connect","actions","Link","withRouter","Message","Segment","Validator","Auth","state","form","email","password","name","errorMessage","isSignUp","validate","rules","validation","isError","fails","setState","errors","changeHandler","e","target","value","getValidationMessages","validationMessages","push","submitHandler","event","preventDefault","console","log","props","onAuth","then","history","render","formData","length","display","mapStateToProps","isSignup","mapDispatchToProps","dispatch","authLogin"],"mappings":"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","sourcesContent":["import React,{Component} from  'react';\nimport Input from '../../UI/Input/Input';\nimport { connect }from 'react-redux';\nimport * as actions from '../../store/actions/auth/auth';\nimport { Link, withRouter } from 'react-router-dom';\nimport {Message,Segment} from 'semantic-ui-react';\nimport Validator from \"validatorjs\";\n\n\nclass Auth extends Component{\n\n    state ={\n        form: {\n            email:'',\n            password:'',\n            name:''\n        },\n        errorMessage: {\n            email:'',\n            password:''\n        },\n        isSignUp:true\n    }\n    \n    validate = () => {\n        const rules = {\n          email: 'required|email',\n          password: 'required|min:6|max:15',\n          name: 'required'\n        };\n    \n        let validation = new Validator(this.state.form, rules);\n        let isError = validation.fails();\n        this.setState({ errorMessage: validation.errors.errors });\n        return isError;\n    }\n    \n       \n     \n    changeHandler = (e) => {\n        let form = { ...this.state.form }\n        //console.log(e.target.name);\n        form[e.target.name] = e.target.value;\n        //console.log(e.target.value);\n        this.setState({ form });\n        const rules = {\n            email: 'required|email',\n            password: 'required|min:6|max:15',\n            name: 'required'\n          };\n      \n          let validation = new Validator(this.state.form, rules);\n          let isError = validation.fails();\n          this.setState({ errorMessage: validation.errors.errors });\n          return isError;\n      }\n    \n      getValidationMessages = () => {\n        let validationMessages = [];\n       \n        if (this.state.errorMessage.email) {\n          validationMessages.push(<Message key=\"2\"\n            size='mini'\n            error\n            content={this.state.errorMessage.email} />)\n        }\n        if (this.state.errorMessage.password) {\n          validationMessages.push(<Message key=\"3\"\n            size='mini'\n            error\n            content={this.state.errorMessage.password} />)\n        }\n        return validationMessages;\n      }\n    submitHandler = (event) => {\n     \n     event.preventDefault();\n    console.log(\"email: \"+this.state.form.email);\n    console.log(\"signup: \"+this.state.isSignUp);\n    console.log(\"password: \"+this.state.form.password);\n    \n     this.props.onAuth(this.state.form.email,this.state.form.password,this.state.isSignUp)\n    .then(() => {\n        this.props.history.push('/dashboard/posts'); \n    }) \n  \n    }\n\nrender() {\n   \n\n    let validationMessages = this.getValidationMessages();        \n        let formData =(\n    <form>\n\n          {validationMessages.length ? <Segment style={{ display: \"block\" }} stacked>\n            {[...validationMessages]}\n          </Segment> : null}\n               \n                <input type=\"text\" placeholder=\"Email\" name=\"email\" onChange={this.changeHandler}></input><br />\n                <input type=\"password\" placeholder=\"Password \" name=\"password\" onChange={this.changeHandler}></input><br/><br/>\n\n                <button onClick={this.submitHandler}>Submit</button>\n            </form>\n        )\n    return (\n        <div className=\"signup\">\n            <h1> Enter Details...</h1>\n            {formData}\n        </div>\n    \n    )\n}\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        isSignup: state.isSignup\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email,password,isSignUp) =>  dispatch(actions.authLogin(email,password,isSignUp)),\n       \n    }\n}\nexport default withRouter(connect(mapStateToProps,mapDispatchToProps)(Auth));\n\n"]},"metadata":{},"sourceType":"module"}